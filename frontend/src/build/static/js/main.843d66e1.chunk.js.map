{"version":3,"sources":["Presenter/ChatPresenter.tsx","Container/ChatContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ChatPresenter","contents","message","username","setMessage","setUsername","handleEnter","className","style","flex","value","onChange","e","target","map","content","Search","placeholder","onSearch","enterButton","sockJS","SockJS","stompClient","Stomp","over","debug","ChatContainer","React","setContents","useEffect","connect","subscribe","data","newMessage","JSON","parse","body","addMessage","prev","send","stringify","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"0VAcaA,EAAgB,SAAC,GAOH,IANzBC,EAMwB,EANxBA,SACAC,EAKwB,EALxBA,QACAC,EAIwB,EAJxBA,SACAC,EAGwB,EAHxBA,WACAC,EAEwB,EAFxBA,YACAC,EACwB,EADxBA,YAEA,OACE,uBAAKC,UAAW,YACd,uBAAKA,UAAU,UAAf,6BAEE,gBAAC,IAAD,CACEC,MAAO,CAACC,KAAO,GACfC,MAAOP,EACPQ,SAAU,SAAAC,GAAC,OAAEP,EAAYO,EAAEC,OAAOH,WAGtC,uBAAKH,UAAW,YACbN,EAASa,KAAI,SAACZ,GAAD,OACZ,+BAAOA,EAAQC,SAAf,MAA4BD,EAAQa,QAApC,SAGJ,2BACE,gBAAC,IAAMC,OAAP,CACEC,YAAY,yBACZP,MAAOR,EACPS,SAAU,SAACC,GAAD,OAAOR,EAAWQ,EAAEC,OAAOH,QACrCQ,SAAU,SAACR,GAAD,OAAWJ,EAAYH,EAASO,IAC1CS,YAAa,a,6CC9BnBC,EAAS,IAAIC,IAAO,mCACpBC,EAA6BC,IAAMC,KAAKJ,GAC5CE,EAAYG,MAAO,aAEZ,IAAMC,EAAgB,SAAC,GAAQ,qBACJC,WAA0B,IADvB,mBAC5B1B,EAD4B,KAClB2B,EADkB,OAEHD,WAAe,IAFZ,mBAE5BxB,EAF4B,KAElBE,EAFkB,OAGLsB,WAAe,IAHV,mBAG5BzB,EAH4B,KAGnBE,EAHmB,KAKnCyB,qBAAU,WACRP,EAAYQ,QAAQ,IAAG,WACrBR,EAAYS,UAAU,iBAAgB,SAACC,GACrC,IAAMC,EAAuBC,KAAKC,MAAMH,EAAKI,MAC7CC,EAAWJ,WAGf,CAAChC,IAEH,IAMMoC,EAAa,SAACnC,GAClB0B,GAAY,SAAAU,GAAI,4BAAMA,GAAN,CAAYpC,QAG9B,OACE,uBAAKK,UAAW,aACd,gBAAC,EAAD,CACEN,SAAUA,EACVK,YAdc,SAACH,EAAkBY,GACrC,IAAMkB,EAAsB,CAAE9B,WAAUY,WACxCO,EAAYiB,KAAK,SAAS,GAAGL,KAAKM,UAAUP,IAC5C7B,EAAW,KAYPF,QAASA,EACTE,WAAYA,EACZD,SAAUA,EACVE,YAAaA,M,OCrCNoC,MARf,WACE,OACE,yBAAKlC,UAAU,OACb,kBAAC,EAAD,QCKcmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMzD,c","file":"static/js/main.843d66e1.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport \"./ChatPresenter.scss\";\r\nimport { Button, Input } from \"antd\";\r\nimport { message } from \"../Container/ChatContainer\";\r\n\r\ntype ChatPresenterProps = {\r\n  contents: Array<message>;\r\n  message: string;\r\n  username : string;\r\n  setMessage: Function;\r\n  setUsername : Function;\r\n  handleEnter: Function;\r\n};\r\n\r\nexport const ChatPresenter = ({\r\n  contents,\r\n  message,\r\n  username,\r\n  setMessage,\r\n  setUsername,\r\n  handleEnter,\r\n}: ChatPresenterProps) => {\r\n  return (\r\n    <div className={\"chat-box\"}>\r\n      <div className='header'>\r\n        유저이름 : \r\n        <Input\r\n          style={{flex : 1}}\r\n          value={username}\r\n          onChange={e=>setUsername(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className={\"contents\"}>\r\n        {contents.map((message) => (\r\n          <div> {message.username} : {message.content} </div>\r\n        ))}\r\n      </div>\r\n      <div>\r\n        <Input.Search\r\n          placeholder=\"input your messages...\"\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          onSearch={(value) => handleEnter(username,value)}\r\n          enterButton={\"Enter\"}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import * as React from \"react\";\r\nimport { ChatPresenter } from \"../Presenter/ChatPresenter\";\r\nimport \"./ChatContainer.scss\";\r\nimport { message } from \"antd\";\r\nimport {useEffect} from \"react\";\r\nimport SockJS from 'sockjs-client';\r\nimport Stomp from 'stompjs';\r\n\r\nexport type message = {\r\n  username: string;\r\n  content: string;\r\n};\r\n\r\nlet sockJS = new SockJS(\"http://localhost:8080/webSocket\");\r\nlet stompClient : Stomp.Client = Stomp.over(sockJS);\r\nstompClient.debug= () => {};\r\n\r\nexport const ChatContainer = ({}) => {\r\n  const [contents, setContents] = React.useState<message[]>([]);\r\n  const [username, setUsername] = React.useState('');\r\n  const [message, setMessage] = React.useState(\"\");\r\n\r\n  useEffect(()=>{\r\n    stompClient.connect({},()=>{\r\n      stompClient.subscribe('/topic/roomId',(data)=>{\r\n        const newMessage : message = JSON.parse(data.body) as message;\r\n        addMessage(newMessage);\r\n      });\r\n  });\r\n  },[contents]);\r\n  \r\n  const handleEnter = (username: string, content: string) => {\r\n    const newMessage: message = { username, content };\r\n    stompClient.send(\"/hello\",{},JSON.stringify(newMessage));\r\n    setMessage(\"\");\r\n  };\r\n\r\n  const addMessage = (message : message) =>{\r\n    setContents(prev=>[...prev, message]);\r\n  };\r\n\r\n  return (\r\n    <div className={\"container\"}>\r\n      <ChatPresenter\r\n        contents={contents}\r\n        handleEnter={handleEnter}\r\n        message={message}\r\n        setMessage={setMessage}\r\n        username={username}\r\n        setUsername={setUsername}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {ChatContainer} from './Container';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ChatContainer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}